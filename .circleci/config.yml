defaults: &defaults
  docker:
  - image: golang:1.11
  working_directory: /go/src/github.com/kubermatic/cluster-api-provider-digitalocean

version: 2
jobs:
  checkout_code:
    <<: *defaults
    steps:
    - checkout
    - save_cache:
        key: repo-{{ .Environment.CIRCLE_SHA1 }}
        paths:
        - /go/src/github.com/kubermatic/cluster-api-provider-digitalocean

  check-dependencies:
    <<: *defaults
    steps:
    - restore_cache:
        key: repo-{{ .Environment.CIRCLE_SHA1 }}
    - run: export DEP_RELEASE_TAG=v0.5.0; curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
    - run: dep status

  lint:
    <<: *defaults
    docker:
    - image: quay.io/kubermatic/gometalinter:latest
    steps:
    - restore_cache:
        key: repo-{{ .Environment.CIRCLE_SHA1 }}
    - run: gometalinter --config gometalinter.json ./...

  test:
    <<: *defaults
    steps:
    - restore_cache:
        key: repo-{{ .Environment.CIRCLE_SHA1 }}
    - run: go test -race ./...

  build:
    <<: *defaults
    steps:
    - restore_cache:
        key: repo-{{ .Environment.CIRCLE_SHA1 }}
    - run: DEP_RELEASE_TAG=v0.5.0 curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
    - run: make compile
    - save_cache:
        key: cluster-api-provider-digitalocean-{{ .Revision }}
        paths:
        - /go/src/github.com/kubermatic/cluster-api-provider-digitalocean

  publish:
    <<: *defaults
    docker:
    - image: docker:stable
    steps:
    - restore_cache:
        key: repo-{{ .Environment.CIRCLE_SHA1 }}
    - restore_cache:
        key: cluster-api-provider-digitalocean-{{ .Revision }}
    - setup_remote_docker
    - run: apk update && apk add make bash git
    - run: |
        set -e
        export GIT_TAG=$CIRCLE_TAG
        docker login -u "${DOCKERHUB_USER}" -p "${DOCKERHUB_PASS}" quay.io
        make push

  e2e:
    machine: true
    environment:
      CHANGE_MINIKUBE_NONE_USER: true
      KUBERNETES_VERSION: v1.10.0
      MINIKUBE_VERSION: v0.27.0
    steps:
    - run:
        name: Configure CI instance
        command: |
          # Make root rshared in order to fix kube-dns problems.
          sudo mount --make-rshared /
          # Create project directory
          sudo mkdir -p /go/src/github.com/kubermatic/cluster-api-provider-digitalocean
          # Set correct permissions on project directory
          sudo chown -R $USER:$USER /go
    - restore_cache:
        key: repo-{{ .Environment.CIRCLE_SHA1 }}
    - run:
        name: Install dependencies
        command: |
          # Download minikube.
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
          # Download kubeadm.
          curl -Lo kubeadm https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubeadm && chmod +x kubeadm && sudo mv kubeadm /usr/bin/
          # Download kubectl, which is a requirement for using minikube and running e2e tests.
          curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
    - run:
        name: Set up minikube
        command: |
          # Start minikube.
          sudo -E minikube start --vm-driver=none --bootstrapper=localkube --kubernetes-version=${KUBERNETES_VERSION} --feature-gates=CustomResourceSubresources=true --extra-config=apiserver.Authorization.Mode=RBAC
          # Update the kubeconfig to use the minikube cluster.
          minikube update-context
    - run:
        name: Update kubeconfig
        command: |
          # Read certificate files.
          MINIKUBE_CA_CERT=$(cat $HOME/.minikube/ca.crt | base64 -w0)
          MINIKUBE_CLIENT_CERT=$(cat $HOME/.minikube/client.crt | base64 -w0)
          MINIKUBE_CLIENT_CERT_KEY=$(cat $HOME/.minikube/client.key | base64 -w0)
          # Update kubeconfig file.
          sed -i "s/certificate-authority.*/certificate-authority-data: $MINIKUBE_CA_CERT/" $HOME/.kube/config
          sed -i "s/client-certificate.*/client-certificate-data: $MINIKUBE_CLIENT_CERT/" $HOME/.kube/config
          sed -i "s/client-key.*/client-key-data: $MINIKUBE_CLIENT_CERT_KEY/" $HOME/.kube/config
          # Copy kubeconfig to /etc/kubernetes and set permissions
          sudo mkdir -p /etc/kubernetes
          sudo cp $HOME/.kube/config /etc/kubernetes/admin.conf
          sudo chown $USER:$USER /etc/kubernetes/admin.conf
    - run:
        name: Preapre cluster
        command: |
          # Wait for Kubernetes to be up and ready.
          JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; echo "waiting for node to become ready"; kubectl get nodes; done
          # Label node as master.
          NODENAME=$(kubectl get nodes -o jsonpath="{range .items[*]}{@.metadata.name}{end}")
          kubectl label node ${NODENAME} node-role.kubernetes.io/master=
          # Ensure default ServiceAccount is a cluster-admin, as a workaround required for kube-dns when running with RBAC enabled.
          kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default
          # Wait for kube-dns to become ready.
          JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-dns to be available"; kubectl get pods --all-namespaces; done
    - run:
        name: Generate manifests
        working_directory: /go/src/github.com/kubermatic/cluster-api-provider-digitalocean/clusterctl/examples/digitalocean
        command: |
          # Make SSH directory.
          mkdir -p $HOME/.ssh
          chmod 700 $HOME/.ssh
          # Run generation script.
          SSH_KEY_GENERATED_FILE=$HOME/.ssh/id_rsa ./generate-yaml.sh
          # Remove SSH key from machine manifest.
          sed -i "/sshPublicKeys:/d" ./out/machines.yaml
          sed -i  "/\- \"ssh-rsa.*/d" ./out/machines.yaml
    - run:
        name: Run clusterctl
        no_output_timeout: 10m
        working_directory: /go/src/github.com/kubermatic/cluster-api-provider-digitalocean/clusterctl
        environment:
          GOPATH: /go
        command: |
          # TODO: Enable clusterctl.
          # TODO: We need cleanup before enabling clusterctl.
          # TODO: This should be a bash script instead of running it like this.
          # go run main.go create cluster --provider digitalocean -c examples/digitalocean/out/cluster.yaml -m examples/digitalocean/out/machines.yaml -p examples/digitalocean/out/provider-components.yaml -a examples/digitalocean/out/addons.yaml --existing-bootstrap-cluster-kubeconfig /etc/kubernetes/admin.conf

workflows:
  version: 2
  build:
    jobs:
    - checkout_code:
        filters:
          tags:
            only: /v.*/
    - check-dependencies:
        requires:
        - checkout_code
        filters:
          tags:
            only: /v.*/
    - lint:
        requires:
        - checkout_code
        filters:
          tags:
            only: /v.*/
    - test:
        requires:
        - checkout_code
        filters:
          tags:
            only: /v.*/
    - build:
        requires:
        - checkout_code
        filters:
          tags:
            only: /v.*/
    - publish:
        requires:
        - build
        - test
        - check-dependencies
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /v.*/
    - e2e:
        requires:
        - check-dependencies
        - build
        - test
        filters:
          tags:
            only: /v.*/

